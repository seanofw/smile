
Grammar for Smile, 16.0
=======================

This grammar is something like LR(3), with common shift-reduce conflicts resolved in
favor of shift (usually), tokenizer communication required to support variable declarations
properly, a special set of tokenization rules for nonbreak_expr, and a few productions that
require explicit precedence handling.  A PEG form of this would likely be cleaner.

Special not-easily-expressed parsing rule:  Binary operators cannot be matched as binary
operators if they are the first non-whitespace on a line.  This behavior is enabled inside
{curly braces} and [square brackets], and disabled inside (parentheses) and inside the
condition of 'if' or 'while-do'.  All other productions inherit their parent's line-break rule.

Even more difficult to express:  #syntax declarations add to one of the eight allowed
production rules, and, most importantly, can create new production rules.

In short, this is quite parseable, but it ain't YACC-friendly.  We use a recursive-descent
parser in the standard Smile implementation.

---------------------------------------------------------------------------------------------------

Tokens:
	LBRACE RBRACE LPAREN RPAREN LBRACKET RBRACKET
	BAR EQUAL EQUAL_NOSPACE BACKTICK DOT DOTDOT DOTDOTDOT DOUBLEHASH COLON COMMA AT ATAT
	IF UNLESS THEN ELSE WHILE UNTIL DO TILL WHEN RETURN VAR AUTO CONST TRY CATCH NEW IS TYPEOF AND OR NOT
	VAR_NAME UNKNOWN_ALPHA_NAME UNKNOWN_PUNCT_NAME TILL_NAME
	EQ NE LE GE GT LT SUPEREQ SUPERNE
	PLUS MINUS STAR SLASH
	CHAR STRING BYTE INT32 INT64 REAL32 REAL64
	LOANWORD_INCLUDE LOANWORD_BRK LOANWORD_SYNTAX LOANWORD_LOANWORD LOANWORD_ALL
	LOANWORD_JSON LOANWORD_XML LOANWORD_HTML LOANWORD_REGEX

---------------------------------------------------------------------------------------------------

program ::= exprs_opt

scope ::= LBRACE exprs_opt RBRACE			// See note above about binary operators (no breaking allowed in 'exprs_opt').

exprs_opt ::= exprs |
exprs ::= expr | exprs expr

expr ::= arith
		| if_then
		| while_do
		| do_while
		| till_do
		| try_catch
		| var_decl
		| const_decl
		| auto_decl
		| keyword_decl
		| scope
		| return
		| LOANWORD_INCLUDE include_expr
		| LOANWORD_BRK

include_expr ::= STRING
		| STRING COLON include_names
include_names ::= anyname
		| anyname AS anyname
		| LOANWORD_SYNTAX
		| LOANWORD_LOANWORD
		| LOANWORD_ALL
		| include_names COMMA anyname

if_then ::= IF arith THEN expr				// See note above about binary operators (breaking allowed in 'arith').
		| IF arith THEN expr ELSE expr		// See note above about binary operators (breaking allowed in 'arith').
		| UNLESS arith THEN expr			// See note above about binary operators (breaking allowed in 'arith').
		| UNLESS arith THEN expr ELSE expr	// See note above about binary operators (breaking allowed in 'arith').

while_do ::= WHILE arith DO expr			// See note above about binary operators (breaking allowed in 'arith').
		| UNTIL arith DO expr				// See note above about binary operators (breaking allowed in 'arith').
do_while ::= DO expr WHILE arith
		| DO expr UNTIL arith

try_catch ::= TRY expr CATCH func

till_do ::= TILL till_names DO expr whens_opt
till_names ::= anyname | till_names COMMA anyname
whens_opt ::= whens |
whens ::= when whens | when
when ::= WHEN name expr

return ::= RETURN arith

var_decl ::= VAR decls
decls ::= decl | decls COMMA decl
decl ::= name | name EQUAL arith | name EQUAL_NOSPACE arith

auto_decl ::= AUTO adecls
const_decl ::= CONST adecls
adecls ::= adecl | adecls COMMA adecl
adecl ::= name EQUAL arith | name EQUAL_NOSPACE arith

keyword_decl ::= KEYWORD kdecls
kdecls ::= name | kdecls COMMA name

any_name ::= name | EQ | NE | LE | GE | LT | GT | SUPEREQ | SUPERNE | PLUS | MINUS | STAR | SLASH
		| IF | THEN | ELSE | WHILE | UNTIL | DO | TILL | WHEN | RETURN | VAR | CATCH | NEW
		| OR | AND | NOT
name ::= ALPHA_NAME | PUNCT_NAME | unknown_name
unknown_name ::= UNKNOWN_ALPHA_NAME | UNKNOWN_PUNCT_NAME

arith ::= lvalue unknown_name EQUAL_NOSPACE arith | assign		// There may not be a space between the operator name and the equal sign.

assign ::= lvalue EQUAL assign
		| lvalue EQUAL_NOSPACE assign
        | unknown_name EQUAL assign
        | unknown_name EQUAL_NOSPACE assign
        | orexpr

lvalue ::=	  colonexpr COLON prefixexpr | dotexpr DOT name | VAR_NAME
	| LPAREN lvalue RPAREN				// See note above about binary operators (breaking allowed in 'lvalue').

orexpr ::= orexpr OR andexpr | andexpr
andexpr ::= andexpr AND notexpr | notexpr
notexpr ::= NOT notexpr | cmpexpr

cmpexpr ::=	  cmpexpr LT addexpr | cmpexpr GT addexpr | cmpexpr LE addexpr | cmpexpr GE addexpr
	| cmpexpr EQ addexpr | cmpexpr NE addexpr | cmpexpr SUPEREQ addexpr | cmpexpr SUPERNE addexpr
	| cmpexpr IS addexpr
	| addexpr

addexpr ::= addexpr PLUS mulexpr | addexpr MINUS mulexpr | mulexpr
mulexpr ::= mulexpr STAR binaryexpr | mulexpr SLASH binaryexpr | binaryexpr

binaryexpr ::=	  binaryexpr UNKNOWN_PUNCT_NAME binary_args	// See note above about binary operators.
	| binaryexpr UNKNOWN_ALPHA_NAME binary_args	// See note above about binary operators.
	| colonexpr
binary_args ::= binary_args COMMA colonexpr | colonexpr

colonexpr ::= colonexpr COLON rangeexpr | rangeexpr

rangeexpr ::= prefixexpr DOTDOT prefixexpr | prefixexpr

prefixexpr ::=	  UNKNOWN_PUNCT_NAME prefixexpr | UNKNOWN_ALPHA_NAME prefixexpr
	| AND prefixexpr | OR prefixexpr
	| EQ prefixexpr | NE prefixexpr
	| SUPER_EQ prefixexpr | SUPER_NE prefixexpr
	| LE prefixexpr | GE prefixexpr
	| LT prefixexpr | GT prefixexpr
	| PLUS prefixexpr | MINUS prefixexpr
	| STAR prefixexpr | SLASH prefixexpr
	| TYPEOF prefixexpr
	| newexpr

newexpr ::=	  NEW LBRACE members_opt RBRACE	// See note above about binary operators (no breaking allowed in 'members_opt').
	| NEW dotexpr LBRACE members_opt RBRACE	// See note above about binary operators (no breaking allowed in 'members_opt').
	| LBRACE members_opt RBRACE	// Shorthand new-object form
	| consexpr

consexpr ::= dotexpr DOUBLEHASH consexpr | dotexpr

dotexpr ::= dotexpr DOT any_name | term

term ::= LPAREN expr RPAREN							// See note above about binary operators (breaking allowed in 'expr').
       | func
       | LBRACKET call_args_opt RBRACKET			// See note above about binary operators (no breaking allowed in 'call_args_opt').
       | BACKTICK LPAREN expr RPAREN
       | BACKTICK scope
       | BACKTICK raw_list_term
       | ALPHA_NAME
       | PUNCT_NAME
       | RAWSTRING
       | DYNSTRING
       | CHAR
       | BYTE | INT16 | INT32 | INT64 | REAL32 | REAL64 | REAL128 | FLOAT32 | FLOAT64
       | LOANWORD_JSON
       | LOANWORD_XML
       | LOANWORD_HTML
       | LOANWORD_REGEX
       | LOANWORD_SYNTAX syntax_expr
       | LOANWORD_LOANWORD loanword_expr

call_args_opt: call_args |
call_args: orexpr call_args | orexpr

string ::= RAWSTRING | DYNSTRING

func ::= BAR params_opt BAR expr semi_opt		// See note above about binary operators (no breaking allowed in 'exprs').

semi_opt ::= SEMICOLON |

members_opt ::= members |
members ::= members member | member
member ::= name COLON orexpr

params_opt ::= params param_rest | param_rest |
param_rest ::= param_name ELLIPSIS
params ::= params param | params ',' param | param
param ::= param_name | param_name '=' raw_list_term
param_name ::= name | param_type COLON name
param_type ::= ALPHA_NAME | PUNCT_NAME

raw_list_item ::= raw_list_dotexpr
raw_list_dotexpr ::= raw_list_dotexpr DOT any_name | raw_list_term
raw_list_term ::= raw_list | any_name
       | CHAR | RAWSTRING
       | BYTE | INT16 | INT32 | INT64 | REAL32 | REAL64 | REAL128 | FLOAT32 | FLOAT64
       | BACKTICK raw_list_term
       | nonraw_term
nonraw_term ::= LPAREN expr RPAREN
       | scope
       | DYNSTRING
	   | AT any_name
	   | ATAT any_name

raw_list ::= LBRACKET raw_list_items_opt RBRACKET
raw_list_items_opt ::= raw_list_items |
raw_list_items ::= raw_list_items raw_list_item | raw_list_item

syntax_expr ::= syntax_level COLON LBRACKET syntax_pattern RBRACKET IMPLIES raw_list_term
syntax_level ::= any_name
syntax_pattern ::= syntax_element | syntax_element syntax_pattern
syntax_element ::= syntax_term | syntax_nonterm
syntax_term ::= any_name | COMMA | SEMICOLON | COLON | LPAREN syntax_pattern RPAREN | LBRACE syntax_pattern RBRACE
syntax_nonterm ::= LBRACKET syntax_with_opt any_name any_name syntax_sep_opt RBRACKET
syntax_with_opt ::= WITH syntax_with_names COLON |
syntax_with_names ::= syntax_with_names COMMA any_name | syntax_with_names any_name | any_name
syntax_sep_opt ::= COMMA | SEMICOLON |

loanword_expr ::= any_name COLON LOANWORD_REGEX IMPLIES raw_list_term
